version: 0.2
env:
  variables:
    REPOSITORY_URI: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
phases:
  install:
    runtime-versions: 
      docker: 20
    commands:
      - echo Installing kubectl...
      - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      - sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      - sudo chmod +x ./kubectl
      - mv ./kubectl /usr/local/bin/kubectl
      - whereis kubectl
      - which kubectl
      - echo Successfully installed kubectl
      - kubectl version --client
      - echo Installing authenticator...
      - curl -o aws-iam-authenticator https://amazon-eks.s3.us-east-1.amazonaws.com/1.15.10/2020-02-22/bin/linux/amd64/aws-iam-authenticator
      - chmod +x ./aws-iam-authenticator
      - sudo mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - export REPOSITORY_URI=$(aws ecr describe-repositories --repository-names ecr_repo --query 'repositories[0].repositoryUri' --output text)
      - echo Setting up Kubernetes context...
      - aws eks update-kubeconfig --name my-eks-cluster --region $AWS_DEFAULT_REGION
      - CALLER_ARN=$(aws sts get-caller-identity --query 'Arn' --output text)
      - echo "Checking if EKS access entry exists for $CALLER_ARN..."
      - if ! aws eks describe-access-entries --cluster-name my-eks-cluster --query "accessEntries[?principalArn=='arn:aws:iam::$AWS_ACCOUNT_ID:role/eks-codebuild-role']" --output text | grep -q arn:aws:iam::$AWS_ACCOUNT_ID:role/eks-codebuild-role; then
          echo "Creating EKS access entry...";
          aws eks create-access-entry --cluster-name my-eks-cluster --principal-arn arn:aws:iam::$AWS_ACCOUNT_ID:role/eks-codebuild-role --type STANDARD --username arn:aws:sts::$AWS_ACCOUNT_ID:assumed-role/eks-codebuild-role/{{SessionName}};
        else
          echo "EKS access entry for $CALLER_ARN already exists.";
        fi
  
      # Conditional check for the EKS access policy association
      - echo "Checking if EKS access policy is associated for $CALLER_ARN..."
      - if ! aws eks describe-access-policies --cluster-name my-eks-cluster --query "accessPolicies[?principalArn=='arn:aws:sts::$AWS_ACCOUNT_ID:assumed-role/eks-codebuild-role/{{SessionName}}']" --output text | grep -q $CALLER_ARN; then
          echo "Associating access policy for EKS...";
          aws eks associate-access-policy --cluster-name my-eks-cluster --principal-arn arn:aws:iam::$AWS_ACCOUNT_ID:role/eks-codebuild-role --access-scope type=cluster --policy-arn arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy;
        else
          echo "Access policy for $CALLER_ARN is already associated.";
        fi
  build:
    commands:
      - echo Building the Docker image...
      - pwd 
      - docker build -t $IMAGE_REPO_NAME .
      - docker tag $IMAGE_REPO_NAME $REPOSITORY_URI
  post_build:
    commands:
      - echo Pushing the Docker image...
      - docker push $REPOSITORY_URI
      - cat deployment.yaml
      - kubectl config view 
      - echo Applying deployment...
      - cat /root/.kube/config
      - aws sts get-caller-identity
      - kubectl apply -f deployment.yaml --validate=false
      - kubectl apply -f service.yaml
      - kubectl get svc

artifacts:
  files:
    - '**/*'
  discard-paths: yes
